# -*- coding: utf-8 -*-
"""projeto_imobiliaria .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LRdFVqf2mDizLQYuA1d_qhaWBW6c1dNv

# **ANÁLISE DE DADOS IMOBILIÁRIOS NO RIO DE JANEIRO**

**Objetivo** : Neste projeto minha principal tarefa foi analisar uma base de dados contendo informações detalhadas sobre preços de aluguéis de imóveis no Rio de Janeiro.
Esse projeto evidencia habilidades como tratamento de dados, análise estatística, manipulação de dados e criação de insights estratégicos, aplicadas ao setor imobiliário.

**Ferramentas e Tecnologias Utilizadas**


*   **Linguagem**: Python

*   **Bibliotecas:** pandas, numpy, matplotlib, seaborn

*   **Visualização de Dados:**: Gráficos interativos e estáticos para identificar padrões e tendências

*   **Processamento de Dados:** Limpeza, transformação e filtragem para garantir a qualidade das informações analisadas

**Etapas do Projeto:**


1.   **Características Gerais da Base de Dados:**
Explorei os dados para entender suas dimensões, tipos de variáveis e a distribuição geral das informações.

2.   **Valor Médio de Aluguel por Tipo de Imóvel:**
Calculei a média de preços de aluguel segmentada por categorias de imóveis, como apartamentos, casas e imóveis comerciais, identificando tendências e variações significativas.

3.   **Removendo Imóveis Comerciais:**    
Refinei a base de dados ao excluir imóveis comerciais para focar exclusivamente no mercado residencial.

4.   **Percentual de Cada Tipo de Imóvel:**
Analisei a representatividade de cada tipo de imóvel na base de dados, identificando as proporções de apartamentos, casas e outros tipos.

5.   **Filtrando Apenas Apartamentos:**
Selecionei registros específicos de apartamentos para análises mais direcionadas, já que eles representam uma parte significativa do mercado imobiliário.

**Tratamento e Filtragem de Dados**

6.   **Lidando com Dados Nulos:**
Identifiquei e tratei valores ausentes para garantir a integridade da análise, utilizando estratégias como substituição e exclusão de registros.

7.   **Removendo Registros:**
Eliminei registros inconsistentes ou irrelevantes, melhorando a qualidade e confiabilidade do conjunto de dados.


8.   **Aplicando Filtros:**
Utilizei critérios específicos para filtrar informações e focar em segmentos de maior interesse para a análise.

**Criação de Colunas Categóricas e Manipulação de Dados**

Implementei a criação de novas colunas categóricas para enriquecer a análise, permitindo uma segmentação mais detalhada e insights aprofundados sobre os dados.

# IMPORTANDO A BASE DE DADOS
"""

import pandas as pd

url = 'https://raw.githubusercontent.com/alura-cursos/pandas-conhecendo-a-biblioteca/main/base-de-dados/aluguel.csv'
pd.read_csv(url)

pd.read_csv(url, sep=';')

dados = pd.read_csv(url, sep=';')

dados.head()

dados.tail()

type(dados)

"""
#CARACTERÍSTICAS GERAIS DA BASE DE DADOS"""

dados.shape

dados.columns

dados.info()

dados['Tipo']

dados[['Quartos','Valor']]

"""# VALOR MÉDIO DE ALUGUEL POR TIPO DE IMÓVEL

"""

dados.head()

dados['Valor'].mean()

dados.groupby('Tipo')['Valor'].mean()

dados.groupby('Tipo')[['Valor']].mean().sort_values('Valor')

df_preco_tipo = dados.groupby('Tipo')[['Valor']].mean().sort_values('Valor')
df_preco_tipo.plot(kind='barh',figsize=(14,10),color = 'red');

"""#REMOVENDO OS IMÓVEIS COMERCIAIS

"""

dados.Tipo.unique()

imoveis_comerciais = ['Conjunto Comercial/Sala','Prédio Inteiro','Loja/Salão','Galpão/Depósito/Armazém','Casa Comercial','Terreno Padrão','Box/Garagem','Loja Shopping/ Ct Comercial',
                       'Chácara','Loteamento/Condomínio','Sítio', 'Pousada/Chalé','Hotel', 'Indústria']

dados.query('@imoveis_comerciais not in Tipo')

df = dados.query('@imoveis_comerciais not in Tipo')
df.head()

df.Tipo.unique()

df_preco_tipo = df.groupby('Tipo')[['Valor']].mean().sort_values('Valor')
df_preco_tipo.plot(kind='barh',figsize=(14,10),color = 'red');



"""# PERCENTUAL DE CADA TIPO DE IMÓVEL NA NOSSA BASE DE DADOS?"""

df.Tipo.unique()

df.Tipo.value_counts(normalize=True).to_frame().sort_values('Tipo')

df_percentual_tipo = df.Tipo.value_counts(normalize=True).to_frame().sort_values('Tipo')
df_percentual_tipo.plot(kind = 'bar', figsize=(14,10), color = 'green',
                        xlabel='Tipos', ylabel = 'Percentual')

"""# SELECIONANDO APENAS OS IMÓVEIS DO TIPO APARTAMENTO"""

df.query('Tipo == "Apartamento"')

df = df.query('Tipo == "Apartamento"')

"""#TRATANDO E FILTRANDO OS DADOS

#LIDANDO COM DADOS NULOS
"""

df.isnull()

df.isnull().sum()

df.fillna(0)

df = df.fillna(0)

df.isnull().sum()



"""#REMOVENDO REGISTROS"""

df.query('Valor== 0 | Condominio == 0 ')

df.query('Valor== 0 | Condominio == 0 ').index

registros_a_remover = df.query('Valor== 0 | Condominio == 0 ').index

df.drop(registros_a_remover, axis = 0, inplace=True)

df.query('Valor== 0 | Condominio == 0 ')



"""# APLICANDO FILTROS"""

df

df.query('Quartos == 1 and Valor < 1200')

Filtros_1 = df.query('Quartos == 1 and Valor < 1200')

df.query('Quartos >=2 and Valor < 3000 and Area > 70')

Filtros_2 = df.query('Quartos >=2 and Valor < 3000 and Area > 70')

"""#SALVANDO OS DADOS"""

df.to_csv('dados_apartamentos.csv', index = False)

pd.read_csv('dados_apartamentos.csv')

df.to_csv('dados_apartamentos.csv', index = False, sep = ';')

pd.read_csv('dados_apartamentos.csv',sep = ';')

"""#SALVANDO FILTROS_1/2

"""

df.to_csv('Filtros_1' ,sep = ';', index = False)

df.to_csv('Filtros_2',sep = ';', index = False)



"""#**MANIPULANDO OS DADOS**

#**CRIANDO COLUNAS CATEGÓRICAS**
"""

url = 'https://raw.githubusercontent.com/alura-cursos/pandas-conhecendo-a-biblioteca/main/base-de-dados/aluguel.csv'
dados = pd.read_csv(url, sep = ";")
dados.head()

dados ['Valor_por_mes'] = dados['Valor'] + dados ['Condominio']
dados.head()

dados ['Valor_por_ano'] = dados ['Valor_por_mes'] *12 + dados ['IPTU']
dados.head()



"""#CRIANDO COLUNAS CATEGÓRICAS"""

dados['Descricao'] = dados ['Tipo'] +  ' em ' + dados  ['Bairro']
dados.head()

dados['Descircao'] =  dados ['Tipo'] + ' em ' + dados['Bairro'] + ' com ' + \
                      dados['Quartos'].astype(str)+ ' quartos(s) ' + \
                      ' e ' + dados['Vagas'].astype(str) + '  vaga(s) de garagem  '
dados.head()

dados ['Possui_suite']  = dados['Suites'].apply(lambda x:"Sim" if x > 0 else "Não")
dados.head()

dados.to_csv('dados_completos_dev.csv', index=False, sep = ';')

